@use "sass:math";

//Tip:: Number of grid columns
$grid_columns: 12;

//Tip:: gaps between elements in a grid
$grid_gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

$layout_values: flex-start, flex-end, center, space-between, space-around;

@each $val in $layout_values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

@each $key, $value in $grid_gaps {
  .gap-#{$key} > * {
    padding: $value;
  }

  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

//* Grid depending on the screen size
@include xs {
  @for $i from 1 through $grid_columns {
    .col-xs-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i*100%, $grid_columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid_columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid_columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid_columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid_columns);
    }
  }
}


@include lg {
  @for $i from 1 through $grid_columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid_columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid_columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid_columns);
    }
  }
}


